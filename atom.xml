<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jesses</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-05T10:01:50.070Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jesses</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git学习总结</title>
    <link href="http://yoursite.com/2019/07/05/Git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/07/05/Git学习总结/</id>
    <published>2019-07-05T09:51:10.000Z</published>
    <updated>2019-07-05T10:01:50.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/07/05/5d1f1e4d9004b19730.png" title="Snipaste_2019-07-05_17-53-43.png" width="80%"></p><a id="more"></a><h1 id="Git学习"><a href="#Git学习" class="headerlink" title="Git学习"></a>Git学习</h1><h2 id="1-常用命"><a href="#1-常用命" class="headerlink" title="1.常用命"></a>1.常用命</h2><p>git init                                                            初始化，把目录变成Git可以管理的仓库</p><p>git add readme.txt                                         把文件添加到仓库</p><p>git commit -m “worte readme file”                 提交，-m后面输入本次提交的说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>​    2 insertions`：插入了两行内容（readme.txt有两行内容）</p><p>git status                                                        查看仓库当前的状态，看是否有文件被修改</p><p>git diff readme.txt                                           看文件哪里被修改了</p><p>git log                                                             命令显示从最近到最远的提交日志</p><p>git log –pretty=oneline                                    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure><p>前面的是版本号，是通过SHA1计算出来的一个非常大的数字，因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><h4 id="返回之前的版本"><a href="#返回之前的版本" class="headerlink" title="返回之前的版本"></a>返回之前的版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure><p>在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code></p><p>回归版本之后，最新的版本看不到了怎么办？</p><p>别怕，在我们前面有 commit id，只要命令行窗口还没有关闭，就可以回到未来的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure><p>那要是命令行窗口关了，忘记id了肿么办？</p><p>别怕，git reflog用来记录你的每一次命令</p><figure class="highlight plain"><figcaption><span>git reflog</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区就是电脑里看得到的目录</p><p>暂存区存在于git的版本库中，add操作就是把文件添加到暂存区，commit之后就把所有内容都提交到当前分支master</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192" target="_blank" rel="noopener">版本回退</a>一节，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件<code>test.txt</code>到Git并且提交：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add test.txt&quot;</span><br><span class="line">[master b84166e] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &apos;test.txt&apos;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>现在，文件就从版本库中被删除了。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p><p>第3步：要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。</p><h2 id="创建和合并分支"><a href="#创建和合并分支" class="headerlink" title="创建和合并分支"></a>创建和合并分支</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424</a></p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/05/5d1f1e4d9004b19730.png&quot; title=&quot;Snipaste_2019-07-05_17-53-43.png&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>python基础学习笔记</title>
    <link href="http://yoursite.com/2019/06/28/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/28/python基础学习笔记/</id>
    <published>2019-06-28T03:39:14.000Z</published>
    <updated>2019-06-30T16:15:36.120Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/28/5d15a115a0b6d16078.jpg" width="80%"></p><h3 id="1-关于列表"><a href="#1-关于列表" class="headerlink" title="1.关于列表"></a>1.关于列表</h3><p>当对列表进行截取操作时，返回的还是列表[1,2,3,4,5,6][1:6]</p><h3 id="2-关于序列"><a href="#2-关于序列" class="headerlink" title="2.关于序列"></a>2.关于序列</h3><p>str,list,tuple(字符串，列表，元组)都是序列，都可以用切片来截取，都能用下标来选取相应的元素</p><h3 id="3-关于集合"><a href="#3-关于集合" class="headerlink" title="3.关于集合"></a>3.关于集合</h3><p>set 元素是无序的，并且不能重复</p><p>{1,2,3,,4,5}</p><p>集合的相减  -</p><p>集合的交集    &amp;</p><p>集合的合并    |</p><h3 id="4-值类型和引用类型"><a href="#4-值类型和引用类型" class="headerlink" title="4.值类型和引用类型"></a>4.值类型和引用类型</h3><p>int str tuple 不可变</p><p>list，dict可变</p><h3 id="5-关于包里面的-init-py文件"><a href="#5-关于包里面的-init-py文件" class="headerlink" title="5.关于包里面的__init_.py文件"></a>5.关于包里面的__init_.py文件</h3><p>对包进行初始化，每次调用包都会先执行其中的命令，像一次性import所需要的包</p><h3 id="6-序列解包"><a href="#6-序列解包" class="headerlink" title="6.序列解包"></a>6.序列解包</h3><h3 id="7-python中私有变量方法的表示"><a href="#7-python中私有变量方法的表示" class="headerlink" title="7.python中私有变量方法的表示"></a>7.python中私有变量方法的表示</h3><p>在变量方法前面加双下划线”__”</p><h2 id="8-python中的枚举"><a href="#8-python中的枚举" class="headerlink" title="8.python中的枚举"></a>8.python中的枚举</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    red = <span class="number">1</span></span><br><span class="line">    blue = <span class="number">2</span></span><br><span class="line">    green = <span class="number">3</span></span><br><span class="line">    black = <span class="number">4</span></span><br><span class="line">    white = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>枚举类的定义与使用说明如下：</p><p>（1）从enum中导入Enum类，以继承Enum类；</p><p>（2）成员名称不允许重复，但值可以重复，相当于别名；值重复时，通过值只能取到第一个成员；</p><p>（3）若要限制值不可重复，需增加装饰器@unique；</p><p>（4）成员可进行同一性比较，但不可进行大小比较。</p><p>枚举的操作与字典类似，对于整个枚举结构，使用keys、values；但对于单个枚举值，对应name、value，而不是key、value。</p><p>遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> Color.__members__.items():</span><br><span class="line">    print(color[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">blue</span><br><span class="line">green</span><br><span class="line">black</span><br><span class="line">white</span><br></pre></td></tr></table></figure><h2 id="9-匿名函数，map以及reduce-filter函数"><a href="#9-匿名函数，map以及reduce-filter函数" class="headerlink" title="9.匿名函数，map以及reduce,filter函数"></a>9.匿名函数，map以及reduce,filter函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">lb = map(<span class="keyword">lambda</span> x:x*x,l)</span><br><span class="line">print(list(lb)) <span class="comment"># [1, 4, 9, 16, 25, 36]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续计算 reduce</span></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x,y:x+y,l) <span class="comment"># （（1+2）+3）+4...</span></span><br><span class="line">print(r) <span class="comment"># 21</span></span><br><span class="line"><span class="comment"># filter 过滤筛选</span></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">r = filter(<span class="keyword">lambda</span> x:<span class="literal">True</span> <span class="keyword">if</span> x==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span>, list_x)</span><br><span class="line">print(list(r))</span><br></pre></td></tr></table></figure><h2 id="10-装饰器"><a href="#10-装饰器" class="headerlink" title="10.装饰器"></a>10.装饰器</h2><p>装饰器就是为了在不破坏原来函数的基础上，对函数的功能进行添加，以闭包的方式，再用语法糖使得调用更加简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fd</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"我是一个装饰器"</span>)</span><br><span class="line">        f()</span><br><span class="line">    <span class="keyword">return</span> fd</span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"大家好"</span>)</span><br><span class="line">f1()</span><br><span class="line"><span class="comment"># 我是一个装饰器</span></span><br><span class="line"><span class="comment"># 大家好</span></span><br></pre></td></tr></table></figure><p>当需要多个参数时，参数器怎么调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param func: 被装饰的函数</span></span><br><span class="line"><span class="string">    :return: 一个计算函数运行时间的函数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param args:收集被装饰函数的参数</span></span><br><span class="line"><span class="string">        :param kwargs:收集被装饰函数的关键字参数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="comment"># 让进程睡一秒</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 调用被装饰的函数</span></span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        stop_time = time.time()</span><br><span class="line">        print(<span class="string">"&#123;func&#125; spend &#123;time&#125; "</span>.format(func = <span class="string">"add"</span>, time = stop_time-start_time))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="11-生成器对象"><a href="#11-生成器对象" class="headerlink" title="11.生成器对象"></a>11.生成器对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    f = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">    print(f)</span><br><span class="line">    f = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABCDE'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'1234567'</span>]</span><br><span class="line">    print(f)</span><br><span class="line">    <span class="comment"># 用列表的生成表达式语法创建列表容器</span></span><br><span class="line">    <span class="comment"># 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间</span></span><br><span class="line">    f = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>)]</span><br><span class="line">    print(sys.getsizeof(f))  <span class="comment"># 查看对象占用内存的字节数</span></span><br><span class="line">    print(f)</span><br><span class="line">    <span class="comment"># 请注意下面的代码创建的不是一个列表而是一个生成器对象</span></span><br><span class="line">    <span class="comment"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span></span><br><span class="line">    <span class="comment"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span></span><br><span class="line">    f = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000</span>))</span><br><span class="line">    print(sys.getsizeof(f))  <span class="comment"># 相比生成式生成器不占用存储数据的空间</span></span><br><span class="line">    print(f)</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> f:</span><br><span class="line">        print(val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波拉切数列</a>的生成器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> fib(<span class="number">20</span>):</span><br><span class="line">        print(val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/28/5d15a115a0b6d16078.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-关于列表&quot;&gt;&lt;a href=&quot;#1-关于列表&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django课程学习</title>
    <link href="http://yoursite.com/2019/06/27/django-learn/"/>
    <id>http://yoursite.com/2019/06/27/django-learn/</id>
    <published>2019-06-27T15:48:00.000Z</published>
    <updated>2019-06-27T16:08:20.166Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/06/27/5d14e59a1debc95671.png" width="80%"></p><a id="more"></a><h2 id="1-Django的基本命令"><a href="#1-Django的基本命令" class="headerlink" title="1.Django的基本命令"></a>1.Django的基本命令</h2><p>makemigrations 创建模型变更的迁移文件</p><p>migrate  # 执行上一个命令创建的迁移文件</p><p>dumpdata #把数据库数据导出到文件</p><p>loaddate #把文件数据导入到数据库</p><h2 id="2-重写authenticate已达到通过手机号，邮箱都能成功登陆"><a href="#2-重写authenticate已达到通过手机号，邮箱都能成功登陆" class="headerlink" title="2.重写authenticate已达到通过手机号，邮箱都能成功登陆"></a>2.重写authenticate已达到通过手机号，邮箱都能成功登陆</h2><p>在users.view文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.backends <span class="keyword">import</span> ModelBackend</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> UserProfile</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomBackend</span><span class="params">(ModelBackend)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, username=None, password=None, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = UserProfile.objects.get(Q(username=username)|Q(email=username))</span><br><span class="line">            <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                <span class="keyword">return</span> user</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>在setting文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="string">'users.views.CustomBackend'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>另外在登陆的HTML文件中也可以通过if进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> request.user.is_authenticated %&#125;</span><br></pre></td></tr></table></figure><h2 id="3-通过继承django自带的类来管理get和post请求"><a href="#3-通过继承django自带的类来管理get和post请求" class="headerlink" title="3.通过继承django自带的类来管理get和post请求"></a>3.通过继承django自带的类来管理get和post请求</h2><p>所需要用的包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> View</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        user_name = request.POST.get(<span class="string">"username"</span>, <span class="string">""</span>)</span><br><span class="line">        pass_word = request.POST.get(<span class="string">"password"</span>, <span class="string">""</span>)</span><br><span class="line">        user = authenticate(username=user_name, password=pass_word)</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"index.html"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">"msg"</span>: <span class="string">"用户名或者密码错误"</span>&#125;)</span><br></pre></td></tr></table></figure><p>在url路径中修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^login/$'</span>, LoginView.as_view(), name=<span class="string">"login"</span>)</span><br></pre></td></tr></table></figure><h2 id="4-使用forms对表单数据进行校验"><a href="#4-使用forms对表单数据进行校验" class="headerlink" title="4.使用forms对表单数据进行校验"></a>4.使用forms对表单数据进行校验</h2><p>本质上就是个filter，需要注意的是username和password要和表单上的name一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    username = forms.CharField(required=<span class="literal">True</span>)</span><br><span class="line">    password = forms.CharField(required=<span class="literal">True</span>, min_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个forms验证器</span></span><br><span class="line">    Login_form = LoginForm(request.POST)</span><br><span class="line">    <span class="keyword">if</span> Login_form.is_valid():</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><h2 id="5-cookie和session机制在django中的体现"><a href="#5-cookie和session机制在django中的体现" class="headerlink" title="5.cookie和session机制在django中的体现"></a>5.cookie和session机制在django中的体现</h2><h4 id="①cookie的含义：http请求本身是无状态请求，不能保存用户的状态信息，后来就产生了cookie，用户向服务器（也就是网站）发起请求时，服务器会返回一个id，这个id就是个随机文本，记录了用户的请求信息，然后这个id便存储在本地浏览器，注意是本地，本地，本地，下次用户访问服务器时，服务器认识了这个id，就不用重新分配id，也就是不用重新登陆了，但是，因为存储在本地，用户信息容易被窃取，使用（比如某一天，别人用你的电脑上某些网站）"><a href="#①cookie的含义：http请求本身是无状态请求，不能保存用户的状态信息，后来就产生了cookie，用户向服务器（也就是网站）发起请求时，服务器会返回一个id，这个id就是个随机文本，记录了用户的请求信息，然后这个id便存储在本地浏览器，注意是本地，本地，本地，下次用户访问服务器时，服务器认识了这个id，就不用重新分配id，也就是不用重新登陆了，但是，因为存储在本地，用户信息容易被窃取，使用（比如某一天，别人用你的电脑上某些网站）" class="headerlink" title="①cookie的含义：http请求本身是无状态请求，不能保存用户的状态信息，后来就产生了cookie，用户向服务器（也就是网站）发起请求时，服务器会返回一个id，这个id就是个随机文本，记录了用户的请求信息，然后这个id便存储在本地浏览器，注意是本地，本地，本地，下次用户访问服务器时，服务器认识了这个id，就不用重新分配id，也就是不用重新登陆了，但是，因为存储在本地，用户信息容易被窃取，使用（比如某一天，别人用你的电脑上某些网站）"></a>①cookie的含义：http请求本身是无状态请求，不能保存用户的状态信息，后来就产生了cookie，用户向服务器（也就是网站）发起请求时，服务器会返回一个id，这个id就是个随机文本，记录了用户的请求信息，然后这个id便存储在本地浏览器，注意是本地，本地，本地，下次用户访问服务器时，服务器认识了这个id，就不用重新分配id，也就是不用重新登陆了，但是，因为存储在本地，用户信息容易被窃取，使用（比如某一天，别人用你的电脑上某些网站）</h4><h4 id="②session的含义：因此session就出现了，session是存在服务器上的，用户访问服务器时，服务器会生成一段随机字符，以键值对的形式存储在数据库中，并且有定时销毁机制（总不能让你登陆一次就存在服务器数据库一年吧），服务器把session-id返回给用户，存储在浏览器中，用户在访问时，可以成功登陆，但登陆账号密码那些已经作为加密字段存储在服务器数据库里了，因此session是cookie的升级，比cookie安全很多。"><a href="#②session的含义：因此session就出现了，session是存在服务器上的，用户访问服务器时，服务器会生成一段随机字符，以键值对的形式存储在数据库中，并且有定时销毁机制（总不能让你登陆一次就存在服务器数据库一年吧），服务器把session-id返回给用户，存储在浏览器中，用户在访问时，可以成功登陆，但登陆账号密码那些已经作为加密字段存储在服务器数据库里了，因此session是cookie的升级，比cookie安全很多。" class="headerlink" title="②session的含义：因此session就出现了，session是存在服务器上的，用户访问服务器时，服务器会生成一段随机字符，以键值对的形式存储在数据库中，并且有定时销毁机制（总不能让你登陆一次就存在服务器数据库一年吧），服务器把session id返回给用户，存储在浏览器中，用户在访问时，可以成功登陆，但登陆账号密码那些已经作为加密字段存储在服务器数据库里了，因此session是cookie的升级，比cookie安全很多。"></a>②session的含义：因此session就出现了，session是存在服务器上的，用户访问服务器时，服务器会生成一段随机字符，以键值对的形式存储在数据库中，并且有定时销毁机制（总不能让你登陆一次就存在服务器数据库一年吧），服务器把session id返回给用户，存储在浏览器中，用户在访问时，可以成功登陆，但登陆账号密码那些已经作为加密字段存储在服务器数据库里了，因此session是cookie的升级，比cookie安全很多。</h4><p><img src="https://i.loli.net/2019/06/27/5d14e639d24df80861.png" alt="1559875841561.png"></p><p>登陆成功后，自动添加到session表中</p><p><img src="https://i.loli.net/2019/06/27/5d14e68bec49923918.png" alt="1559876139838.png"></p><p>django的具体登陆校验的过程见下</p><p><a href="https://www.cnblogs.com/ccorz/p/6357815.html" target="_blank" rel="noopener">https://www.cnblogs.com/ccorz/p/6357815.html</a></p><h2 id="6-使用navicat生成数据字典"><a href="#6-使用navicat生成数据字典" class="headerlink" title="6.使用navicat生成数据字典"></a>6.使用navicat生成数据字典</h2><p><a href="https://blog.csdn.net/cxh6863/article/details/84499255" target="_blank" rel="noopener">https://blog.csdn.net/cxh6863/article/details/84499255</a></p><h2 id="7-django中filter和get的区别"><a href="#7-django中filter和get的区别" class="headerlink" title="7.django中filter和get的区别"></a>7.django中filter和get的区别</h2><p><a href="https://blog.csdn.net/qq_29113041/article/details/78079165" target="_blank" rel="noopener">https://blog.csdn.net/qq_29113041/article/details/78079165</a></p><h2 id="8-template替换后台数据"><a href="#8-template替换后台数据" class="headerlink" title="8.template替换后台数据"></a>8.template替换后台数据</h2><p><img src="https://i.loli.net/2019/06/27/5d14e6d255d7c62293.png" alt="1561035487576.png"></p><p>在url中对图片访问地址进行配置，首先import进django.views.static import</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^media/(?P&lt;path&gt;.*)$'</span>, serve, &#123;<span class="string">"document_root"</span>: MEDIA_ROOT&#125;)</span><br></pre></td></tr></table></figure><h2 id="9-通过第三方库实现分页功能"><a href="#9-通过第三方库实现分页功能" class="headerlink" title="9.通过第三方库实现分页功能"></a>9.通过第三方库实现分页功能</h2><p><a href="https://github.com/jamespacileo/django-pure-pagination" target="_blank" rel="noopener">https://github.com/jamespacileo/django-pure-pagination</a></p><h2 id="10-AJAX技术"><a href="#10-AJAX技术" class="headerlink" title="10.AJAX技术"></a>10.AJAX技术</h2><p><a href="https://blog.csdn.net/hz_940611/article/details/80850075" target="_blank" rel="noopener">https://blog.csdn.net/hz_940611/article/details/80850075</a></p><h2 id="11-django自带的过滤器功能"><a href="#11-django自带的过滤器功能" class="headerlink" title="11.django自带的过滤器功能"></a>11.django自带的过滤器功能</h2><p>这是django自带的模板机制，可以不通过改变python代码实现对数据的预处理，比如截取部分长度的字符串做判断等</p><p><a href="https://www.jianshu.com/p/b385f774d49e" target="_blank" rel="noopener">https://www.jianshu.com/p/b385f774d49e</a></p><h2 id="12-django的ORM搜索功能以及P模块"><a href="#12-django的ORM搜索功能以及P模块" class="headerlink" title="12.django的ORM搜索功能以及P模块"></a>12.django的ORM搜索功能以及P模块</h2><p><a href="https://www.zmrenwu.com/post/19/" target="_blank" rel="noopener">https://www.zmrenwu.com/post/19/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/06/27/5d14e59a1debc95671.png&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>jQuery基础</title>
    <link href="http://yoursite.com/2019/06/24/jQuery%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/06/24/jQuery基础/</id>
    <published>2019-06-23T17:10:50.000Z</published>
    <updated>2019-06-23T17:14:15.443Z</updated>
    
    <content type="html"><![CDATA[<p><img src="images/titleImage/2.png" width="80%"><br><a id="more"></a></p><h1 id="jQuery基本概念"><a href="#jQuery基本概念" class="headerlink" title="jQuery基本概念"></a>jQuery基本概念</h1><p>学习目标：学会如何使用jQuery，掌握jQuery的常用api，能够使用jQuery实现常见的效果。</p><h2 id="为什么要学习jQuery？"><a href="#为什么要学习jQuery？" class="headerlink" title="为什么要学习jQuery？"></a>为什么要学习jQuery？</h2><p>【01-让div显示与设置内容.html】</p><p>使用javascript开发过程中，有许多的缺点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 查找元素的方法太少，麻烦。</span><br><span class="line"><span class="number">2.</span> 遍历伪数组很麻烦，通常要嵌套一大堆的<span class="keyword">for</span>循环。</span><br><span class="line"><span class="number">3.</span> 有兼容性问题。</span><br><span class="line"><span class="number">4.</span> 想要实现简单的动画效果，也很麻烦</span><br><span class="line"><span class="number">5.</span> 代码冗余。</span><br></pre></td></tr></table></figure><h2 id="jQuery初体验"><a href="#jQuery初体验" class="headerlink" title="jQuery初体验"></a>jQuery初体验</h2><p>【02-让div显示与设置内容.html】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//隐式迭代：偷偷的遍历，在jQuery中，不需要手动写for循环了，会自动进行遍历。</span></span><br><span class="line">        $(<span class="string">"div"</span>).show(<span class="number">200</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"div"</span>).text(<span class="string">"我是内容"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p>优点总结：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 查找元素的方法多种多样，非常灵活</span><br><span class="line"><span class="number">2.</span> 拥有隐式迭代特性，因此不再需要手写<span class="keyword">for</span>循环了。</span><br><span class="line"><span class="number">3.</span> 完全没有兼容性问题。</span><br><span class="line"><span class="number">4.</span> 实现动画非常简单，而且功能更加的强大。</span><br><span class="line"><span class="number">5.</span> 代码简单、粗暴。</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><blockquote><p>没有对比，就没有伤害，有了对比，处处戳中要害。</p></blockquote><h2 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery?"></a>什么是jQuery?</h2><blockquote><p>jQuery的官网 <a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a><br>jQuery就是一个js库，使用jQuery的话，会比使用JavaScript更简单。</p></blockquote><p>js库：把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。（animate.js、common.js）</p><p>我们知道了，jQuery其实就是一个js文件，里面封装了一大堆的方法方便我们的开发，其实就是一个加强版的common.js，因此我们学习jQuery，其实就是学习jQuery这个js文件中封装的一大堆方法。</p><h2 id="jQuery的版本"><a href="#jQuery的版本" class="headerlink" title="jQuery的版本"></a>jQuery的版本</h2><blockquote><p>官网下载地址：<a href="http://jquery.com/download/" target="_blank" rel="noopener">http://jquery.com/download/</a><br>jQuery版本有很多，分为1.x 2.x 3.x</p></blockquote><p>大版本分类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>x版本：能够兼容IE678浏览器</span><br><span class="line"><span class="number">2.</span>x版本：不兼容IE678浏览器</span><br><span class="line"><span class="number">1.</span>x和<span class="number">2.</span>x版本jquery都不再更新版本了，现在只更新<span class="number">3.</span>x版本。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>x版本：不兼容IE678，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>关于压缩版和未压缩版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jquery<span class="number">-1.12</span><span class="number">.4</span>.min.js:压缩版本，适用于生产环境，因为文件比较小，去除了注释、换行、空格等东西，但是基本没有颗阅读性。</span><br><span class="line">jquery<span class="number">-1.12</span><span class="number">.4</span>.js:未压缩版本，适用于学习与开发环境，源码清晰，易阅读。</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="jQuery的入口函数"><a href="#jQuery的入口函数" class="headerlink" title="jQuery的入口函数"></a>jQuery的入口函数</h2><p>使用jQuery的三个步骤：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 引入jQuery文件</span><br><span class="line"><span class="number">2.</span> 入口函数</span><br><span class="line"><span class="number">3.</span> 功能实现</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>关于jQuery的入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>jQuery入口函数与js入口函数的对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</span><br><span class="line"><span class="number">2.</span>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="jQuery对象与DOM对象的区别（重点）"><a href="#jQuery对象与DOM对象的区别（重点）" class="headerlink" title="jQuery对象与DOM对象的区别（重点）"></a>jQuery对象与DOM对象的区别（重点）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</span><br><span class="line"><span class="number">2.</span> jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</span><br><span class="line"><span class="number">3.</span> jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））</span><br><span class="line"><span class="number">4.</span> DOM对象与jQuery对象的方法不能混用。</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>DOM对象转换成jQuery对象：【联想记忆：花钱】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = $(domObj);</span><br><span class="line"><span class="comment">// $(document).ready(function()&#123;&#125;);就是典型的DOM对象转jQuery对象</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>jQuery对象转换成DOM对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(“li”);</span><br><span class="line"><span class="comment">//第一种方法（推荐使用）</span></span><br><span class="line">$li[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$li.get(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>【练习：隔行变色案例.html】</p><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h2><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p><p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。【查看jQuery文档】</p><p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td>获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td>使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td>获取class为redClass的div元素</td></tr></tbody></table><blockquote><p>总结：跟css的选择器用法一模一样。</p></blockquote><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td>使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td>使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><blockquote><p>跟CSS的选择器一模一样。</p></blockquote><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><blockquote><p>这类选择器都带冒号:</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><p>【案例：隔行变色】</p><h2 id="筛选选择器-方法"><a href="#筛选选择器-方法" class="headerlink" title="筛选选择器(方法)"></a>筛选选择器(方法)</h2><blockquote><p>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”);</td><td>相当于$(“ul li”),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“#first”).siblings(“li”);</td><td>查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(“#first”).parent();</td><td>查找父亲</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2);</td><td>相当于$(“li:eq(2)”),index从0开始</td></tr><tr><td>next()</td><td>$(“li”).next()</td><td>找下一个兄弟</td></tr><tr><td>prev()</td><td>$(“li”).prev()</td><td>找上一次兄弟</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【案例：下拉菜单】<span class="keyword">this</span>+children+mouseenter+mouseleave</span><br><span class="line">【案例：突出展示】siblings+find</span><br><span class="line">【案例：手风琴】next+parent</span><br><span class="line">【案例：淘宝精品】index+eq</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h1 id="jQuery操作样式"><a href="#jQuery操作样式" class="headerlink" title="jQuery操作样式"></a>jQuery操作样式</h1><ol><li><p>css操作</p><p>获取样式 $(ele).css(attr);</p><p>//注意，只会获取第一个元素的样式值</p><p>设置单个样式$(ele).css(attr,value);</p><p>设置多个样式$(ele).css(obj);</p></li><li><p>class操作</p><p>添加类：$(ele).addClass(className);</p><p>移除类：$(ele).removeClass(className);</p><p>判断类：$(ele).hasClass(className);</p><p>切换类：$(ele).toggleClass(className)</p></li></ol><p><strong>//隐式迭代</strong></p><p><strong>设置操作的时候：会给jq内部的所有对象都设置上相同的值。</strong></p><p><strong>//获取的时候，只会返回第一个元素对应的值</strong></p><h1 id="jQuery操作属性"><a href="#jQuery操作属性" class="headerlink" title="jQuery操作属性"></a>jQuery操作属性</h1><p>获取属性：$(ele).attr(name);</p><p>设置单个属性 $(ele).attr(name,value);</p><p>设置多个属性$(ele).attr(obj);</p><p><strong>注意</strong></p><p>对于布尔类型的属性（例如checked,disable,selected），不要attr方法，应该用prop方法</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><blockquote><p>插件：jquery不可能包含所有的功能，我们可以通过插件扩展jquery的功能。</p><p>jQuery有着丰富的插件，使用这些插件能给jQuery提供一些额外的功能。</p></blockquote><h3 id="jquery-color-js"><a href="#jquery-color-js" class="headerlink" title="jquery.color.js"></a>jquery.color.js</h3><blockquote><p>animate不支持颜色的渐变，但是使用了jquery.color.js后，就可以支持颜色的渐变了。</p></blockquote><p>使用插件的步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 引入jQuery文件</span><br><span class="line"><span class="number">2.</span> 引入插件（如果有用到css的话，需要引入css）</span><br><span class="line"><span class="number">3.</span> 使用插件</span><br><span class="line"></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h3 id="jquery-lazyload-js"><a href="#jquery-lazyload-js" class="headerlink" title="jquery.lazyload.js"></a>jquery.lazyload.js</h3><p>懒加载插件</p><h3 id="jquery-ui-js插件"><a href="#jquery-ui-js插件" class="headerlink" title="jquery.ui.js插件"></a>jquery.ui.js插件</h3><p>jQueryUI专指由jQuery官方维护的UI方向的插件。</p><p>官方API：<a href="http://api.jqueryui.com/category/all/" target="_blank" rel="noopener">http://api.jqueryui.com/category/all/</a></p><p>其他教程：<a href="http://www.runoob.com/jqueryui/jqueryui-tutorial.html" target="_blank" rel="noopener">jQueryUI教程</a></p><p>基本使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span><span class="number">1.</span>引入jQueryUI的样式文件</span><br><span class="line"><span class="number">2.</span>引入jQuery</span><br><span class="line"><span class="number">3.</span>引入jQueryUI的js文件</span><br><span class="line"><span class="number">4.</span>使用jQueryUI功能</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>使用jquery.ui.js实现新闻模块的案例</p><h2 id="制作jquery插件"><a href="#制作jquery插件" class="headerlink" title="制作jquery插件"></a>制作jquery插件</h2><blockquote><p>原理：jquery插件其实说白了就是给jquery对象增加一个新的方法，让jquery对象拥有某一个功能。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过给$.fn添加方法就能够扩展jquery对象</span></span><br><span class="line">$.fn. pluginName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>制作手风琴插件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;images/titleImage/2.png&quot; width=&quot;80%&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 如何在文章摘要中插入图片</title>
    <link href="http://yoursite.com/2019/04/27/Hexo-Next-%E5%A6%82%E4%BD%95%E5%9C%A8%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/04/27/Hexo-Next-如何在文章摘要中插入图片/</id>
    <published>2019-04-26T16:12:03.000Z</published>
    <updated>2019-04-27T07:42:36.257Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://faithlove.github.io/pic/2018/RMTP_1/topPicPre.png" width="80%"><br>哇，漂亮的小姐姐(❤ ω ❤)<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://faithlove.github.io/pic/2018/RMTP_1/topPicPre.png&quot; width=&quot;80%&quot;&gt;&lt;br&gt;哇，漂亮的小姐姐(❤ ω ❤)&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="“hexo”" scheme="http://yoursite.com/tags/%E2%80%9Chexo%E2%80%9D/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/04/25/README/"/>
    <id>http://yoursite.com/2019/04/25/README/</id>
    <published>2019-04-25T08:00:14.473Z</published>
    <updated>2017-11-15T08:09:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo-theme-yilia"><a href="#hexo-theme-yilia" class="headerlink" title="hexo-theme-yilia"></a>hexo-theme-yilia</h1><p>Yilia 是为 <a href="https://github.com/tommy351/hexo" target="_blank" rel="noopener">hexo</a> 2.4+制作的主题。<br>崇尚简约优雅，以及极致的性能。 你可以点击 <a href="http://litten.me/" target="_blank" rel="noopener">我的博客</a> 查看效果。           </p><p>如果想体验手机浏览效果，可以扫一下二维码：</p><p><img src="https://cloud.githubusercontent.com/assets/2024949/6349328/51a067fe-bc64-11e4-881c-f68050c50c28.png" alt="litten-qrcode"></p><p>—————————————————————</p><p><strong>关于主题：</strong></p><ol><li>崇尚简约       </li><li>追求移动端体验     </li><li>希望把加载速度做到极致（努力中）    </li><li>让大家把注意力放到内容上。这是本主题设计初衷      </li><li>主题不支持IE6，7，8。以后也不会     </li></ol><p><strong>近期更新（2017.07.09）：</strong></p><p>2017.07.09</p><ol><li>返回顶部</li><li>TOC目录</li></ol><p>2016.12.04</p><ol><li>打赏</li><li>搜索</li><li>“更好的”标签云</li><li>“更好的”分享</li><li>一些动画</li></ol><p><strong>计划中：</strong></p><ol><li>移动端优化</li></ol><h2 id="一、外观"><a href="#一、外观" class="headerlink" title="一、外观"></a>一、外观</h2><p>####<strong>常规</strong></p><p><img src="https://cloud.githubusercontent.com/assets/2024949/19027861/92879edc-8967-11e6-8e60-7987b6507c8d.gif" alt="常规"></p><p>####<strong>手机</strong></p><p><img src="https://cloud.githubusercontent.com/assets/2024949/19027020/1c5b756a-895f-11e6-99bf-ddff9687aee0.gif" alt="手机">   </p><p>####<strong>ipad横竖屏切换</strong></p><p><img src="https://cloud.githubusercontent.com/assets/2024949/19026392/e74e1816-8957-11e6-8f08-eac9b3c8c036.gif" alt="ipad横竖屏切换">                    </p><h2 id="二、开发者"><a href="#二、开发者" class="headerlink" title="二、开发者"></a>二、开发者</h2><p>为了性能和开发工程化考虑，Yilia需要使用webpack进行构建生成。</p><p>如果您对主题有一些定制化的需求，请参考wiki<a href="https://github.com/litten/hexo-theme-yilia/wiki/Yilia%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA%E9%A1%BB%E7%9F%A5" target="_blank" rel="noopener">《Yilia源码目录结构及构建须知》</a></p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改hexo根目录下的 <code>_config.yml</code> ： <code>theme: yilia</code></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/yilia</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="四、配置"><a href="#四、配置" class="headerlink" title="四、配置"></a>四、配置</h2><p>主题配置文件在主目录下的<code>_config.yml</code>，请根据自己需要修改使用。<br>完整配置例子，可以参考<a href="https://github.com/litten/BlogBackup" target="_blank" rel="noopener">我的博客备份</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  随笔: /tags/随笔/</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;#&quot;</span><br><span class="line">  weibo: &quot;#&quot;</span><br><span class="line">  rss: &quot;#&quot;</span><br><span class="line">  zhihu: &quot;#&quot;</span><br><span class="line">  #qq: &quot;#&quot;</span><br><span class="line">  #weixin: &quot;#&quot;</span><br><span class="line">  #jianshu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #segmentfault: &quot;#&quot;</span><br><span class="line">  #bilibili: &quot;#&quot;</span><br><span class="line">  #acfun: &quot;#&quot;</span><br><span class="line">  #mail: &quot;mailto:litten225@qq.com&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: </span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: more</span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 2</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: </span><br><span class="line"></span><br><span class="line"># 目录</span><br><span class="line"># 目录设定：0-不显示目录； 1-文章对应的md文件里有toc:true属性，才有目录； 2-所有文章均显示目录</span><br><span class="line">toc: 1</span><br><span class="line"># 根据自己的习惯来设置，如果你的目录标题习惯有标号，置为true即可隐藏hexo重复的序号；否则置为false</span><br><span class="line">toc_hide_index: true</span><br><span class="line"># 目录为空时的提示</span><br><span class="line">toc_empty_wording: &apos;目录，不存在的…&apos;</span><br><span class="line"></span><br><span class="line"># 是否有快速回到顶部的按钮</span><br><span class="line">top: true</span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">baidu_analytics: &apos;&apos;</span><br><span class="line">google_analytics: &apos;&apos;</span><br><span class="line">favicon: /favicon.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar:</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: true</span><br><span class="line"></span><br><span class="line">#评论：1、多说；2、网易云跟帖；3、畅言；4、Disqus；5、Gitment</span><br><span class="line">#不需要使用某项，直接设置值为false，或注释掉</span><br><span class="line">#具体请参考wiki：https://github.com/litten/hexo-theme-yilia/wiki/</span><br><span class="line"></span><br><span class="line">#1、多说</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line">#2、网易云跟帖</span><br><span class="line">wangyiyun: false</span><br><span class="line"></span><br><span class="line">#3、畅言</span><br><span class="line">changyan_appid: false</span><br><span class="line">changyan_conf: false</span><br><span class="line"></span><br><span class="line">#4、Disqus 在hexo根目录的config里也有disqus_shortname字段，优先使用yilia的</span><br><span class="line">disqus: false</span><br><span class="line"></span><br><span class="line">#5、Gitment</span><br><span class="line">gitment_owner: false      #你的 GitHub ID</span><br><span class="line">gitment_repo: &apos;&apos;          #存储评论的 repo</span><br><span class="line">gitment_oauth:</span><br><span class="line">  client_id: &apos;&apos;           #client ID</span><br><span class="line">  client_secret: &apos;&apos;       #client secret</span><br><span class="line"></span><br><span class="line"># 样式定制 - 一般不需要修改，除非有很强的定制欲望…</span><br><span class="line">style:</span><br><span class="line">  # 头像上面的背景颜色</span><br><span class="line">  header: &apos;#4d4d4d&apos;</span><br><span class="line">  # 右滑板块背景</span><br><span class="line">  slider: &apos;linear-gradient(200deg,#a0cfe4,#e8c37e)&apos;</span><br><span class="line"></span><br><span class="line"># slider的设置</span><br><span class="line">slider:</span><br><span class="line">  # 是否默认展开tags板块</span><br><span class="line">  showTags: false</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;所有文章&apos;</span><br><span class="line">  friends: &apos;友链&apos;</span><br><span class="line">  aboutme: &apos;关于我&apos;</span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  友情链接1: http://localhost:4000/</span><br><span class="line">  友情链接2: http://localhost:4000/</span><br><span class="line">  友情链接3: http://localhost:4000/</span><br><span class="line">  友情链接4: http://localhost:4000/</span><br><span class="line">  友情链接5: http://localhost:4000/</span><br><span class="line">  友情链接6: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hexo-theme-yilia&quot;&gt;&lt;a href=&quot;#hexo-theme-yilia&quot; class=&quot;headerlink&quot; title=&quot;hexo-theme-yilia&quot;&gt;&lt;/a&gt;hexo-theme-yilia&lt;/h1&gt;&lt;p&gt;Yilia 是为 &lt;a hr
      
    
    </summary>
    
    
  </entry>
  
</feed>
